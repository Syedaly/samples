[
    "s3:ListBucket",
    "s3:GetObject",
    "s3:PutObject",
    "s3:DeleteObject",
    "s3:GetBucketLocation",
    "s3:GetBucketAcl",
    "s3:GetObjectAcl",
    "s3:PutObjectAcl",
    "kms:Decrypt",
    "kms:GenerateDataKey",
    "kms:DescribeKey",
    "ec2:DescribeInstances",
    "ec2:StartInstances",
    "ec2:StopInstances",
    "logs:CreateLogStream",
    "logs:PutLogEvents"
]


Error: creating S3 Bucket (sf-pcmngd04-use2-test-autolegacyilm-s3-landing) Notification: operation error S3: PutBucketNotificationConfiguration, https response error StatusCode: 400, RequestID: 188EVVEAXWBY6FR4, HostID: G83H8unzLlVdhRsyE0SxgWnkgZaqv/ajTq4YQjtevX+TLfJpWIBP5cA6HnfDsOoMaGBR+wpsubI=, api error InvalidArgument: Unable to validate the following destination configurations
TestS3BucketExists 2025-02-11T21:15:00Z logger.go:67: │ 
TestS3BucketExists 2025-02-11T21:15:00Z logger.go:67: │   with aws_s3_bucket_notification.bucket_notification,
TestS3BucketExists 2025-02-11T21:15:00Z logger.go:67: │   on landing-bucket.tf line 59, in resource "aws_s3_bucket_notification" "bucket_notification":
TestS3BucketExists 2025-02-11T21:15:00Z logger.go:67: │   59: resource "aws_s3_bucket_notification" "bucket_notification" {
TestS3BucketExists 2025-02-11T21:15:00Z logger.go:67: │ 
TestS3BucketExists 2025-02-11T21:15:00Z logger.go:67: ╵
TestS3BucketExists 2025-02-11T21:15:00Z logger.go:67: 
TestS3BucketExists 2025-02-11T21:15:00Z logger.go:67: Error: Failed to perform terraform apply. Unexpected exit code: 1
TestS3BucketExists 2025-02-11T21:15:00Z retry.go:99: Returning due to fatal error: FatalError{Underlying: error while running command: exit status 1; }
    apply.go:15: 
        	Error Trace:	/go/pkg/mod/github.com/gruntwork-io/terratest@v0.48.2/modules/terraform/apply.go:15
        	            				/builds/autolegacyilm/autolegacy-ilm-tf/terratest_s3/s3_test.go:56
        	Error:      	Received unexpected error:
        	            	FatalError{Underlying: error while running command: exit status 1; }
        	Test:       	TestS3BucketExists


resource "aws_s3_bucket_notification" "bucket_notification" {
  bucket = module.sf_s3_landing.id

  queue {
    queue_arn     = var.queue_arn
    events        = ["s3:ObjectCreated:*"]
    filter_suffix = ".trigger"
  }
}

module "s3" {
  source          = "./modules/s3"
  default_tags    = module.tags.common_tags
  deploy_env      = var.deploy_env
  landing_kms_arn = module.kms_key.s3_landing_kms_key_arn
  raw_kms_arn     = module.kms_key.s3_raw_kms_key_arn
  transfer_arn    = var.transfer_principal_arn
  conversion_arn  = var.conversion_principal_arn
  queue_arn       = module.sqs.queue_arn
}

module "sqs" {
  source              = "./modules/sqs"
  default_tags        = module.tags.common_tags
  deploy_env          = var.deploy_env
  login_info          = module.login_info
  sqs_kms_key_arn     = module.kms_key.sqs_kms_key_arn
  lambda_function_arn = var.lambda_function_arn
  lambda_role_arn     = var.lambda_role_arn
  s3_landing_arn      = module.s3.s3_landing_arn
}


package terratests

import (
	"fmt"
	"os"
	"os/exec"
	"testing"
	"time"

	"github.com/gruntwork-io/terratest/modules/files"
	"github.com/gruntwork-io/terratest/modules/terraform"
	test_structure "github.com/gruntwork-io/terratest/modules/test-structure"
	"github.com/stretchr/testify/assert"
)

func TestS3BucketExists(t *testing.T) {
	// Setting Scalr workspace
	scalrOrg := "sf-pcmngd04-test-tenant-autolegacyilm-env"
	scalrEnv := "sf-pcmngd04-test-tenant-autolegacyilm-env"
	scalrWorkspace := "sf-pcmngd04-autolegacyilm-terratest-workspace"
	scalrCmd := exec.Command("scalr", "workspace", "get", scalrWorkspace, "--org", scalrOrg, "--env", scalrEnv, "--output", "json")
	scalrCmd.Dir = "../terraform/modules/s3"

	accountId := os.Getenv("ACCOUNTID")
	fmt.Println("Running in account: " + accountId)
	defer os.Remove("../terraform/modules/s3/provider.tf")
	defer os.Remove("../terraform/modules/s3/backend.tf")
	defer os.Remove("../terraform/modules/s3/s3_test.auto.tfvars")
	files.CopyFile("provider.tf", "../terraform/modules/s3/provider.tf")
	files.CopyFile("backend.tf", "../terraform/modules/s3/backend.tf")

	// Create a temporary folder and copy Terraform files
	exampleFolder := test_structure.CopyTerraformFolderToTemp(t, "../terraform/modules/s3", "./")
	files.CopyFile("s3_test.auto.tfvars", "../terraform/modules/s3/s3_test.auto.tfvars")
	files.CopyFile("s3_test.auto.tfvars", exampleFolder+"/"+"s3_test.auto.tfvars")

	// Apply the SQS module first
	sqsOptions := &terraform.Options{
		TerraformDir: "../terraform/modules/sqs",
		EnvVars: map[string]string{
			"AWS_DEFAULT_REGION": "us-east-1",
		},
	}
	terraform.InitAndApply(t, sqsOptions)
	defer terraform.Destroy(t, sqsOptions)

	// Get the SQS queue ARN
	queueARN := terraform.Output(t, sqsOptions, "queue_arn")

	// Apply the S3 module
	s3Options := &terraform.Options{
		TerraformDir: exampleFolder,
		EnvVars: map[string]string{
			"AWS_DEFAULT_REGION": "us-east-1",
		},
		Vars: map[string]interface{}{
			"queue_arn": queueARN, // Pass the SQS queue ARN to the S3 module
		},
		RetryableTerraformErrors: map[string]string{
			".*empty output.*": "bug in aws_s3_bucket_logging, intermittent error",
		},
		MaxRetries:         5,
		TimeBetweenRetries: 5 * time.Second,
	}
	defer terraform.Destroy(t, s3Options)
	terraform.InitAndApply(t, s3Options)

	// Expected bucket ARNs
	expectedLandingARN := "arn:aws:s3:::sf-pcmngd04-use2-test-autolegacyilm-s3-landing"
	expectedRawARN := "arn:aws:s3:::sf-pcmngd04-use2-test-autolegacyilm-s3-raw"

	// Define output ARNs
	outputLandingName := "s3_landing_arn"
	outputRawName := "s3_raw_arn"

	// Get Terraform outputs
	s3LandingARN := terraform.Output(t, s3Options, outputLandingName)
	s3RawARN := terraform.Output(t, s3Options, outputRawName)

	// Asserts
	assert.Equal(t, expectedLandingARN, s3LandingARN)
	assert.Equal(t, expectedRawARN, s3RawARN)
}

