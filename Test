package terratests

import (
	"os"
	"testing"
	"time"
	"fmt"
	"os/exec"
	"github.com/stretchr/testify/assert"
	"github.com/gruntwork-io/terratest/modules/files"
	"github.com/gruntwork-io/terratest/modules/terraform"
	test_structure "github.com/gruntwork-io/terratest/modules/test-structure"
)

func TestS3BucketExists(t *testing.T) {
	    //setting scalr workspace
	    scalrOrg := "sf-pcmngd04-test-tenant-autolegacyilm-env"
	    scalrEnv := "sf-pcmngd04-test-tenant-autolegacyilm-env"
	    scalrWorkspace := "sf-pcmngd04-autolegacyilm-workspace"
	    scalrCmd := exec.Command("scalr", "workspace", "get", scalrWorkspace, "--org", scalrOrg, "--env", scalrEnv, "--output", "json")
	    scalrCmd.Dir = "../terraform/modules/s3"
	    accountId := os.Getenv("ACCOUNTID")
	    fmt.Println("Running in account: " + accountId)
	    defer os.Remove("../terraform/modules/s3/provider.tf")
	    defer os.Remove("../terraform/modules/s3/backend.tf")
	    defer os.Remove("../terraform/modules/s3/s3_test.auto.tfvars")
		source := "provider.tf"
		destination := "../terraform/modules/s3/provider.tf"
		if _, err := os.Stat(destination); os.IsNotExist(err) {
			t.Fatalf("Destination file does not exist: %s", destination)
		} else  if err !=nil {
			fmt.Printf("Error checking destination file:  %v\n", err)
		} else {
			fmt.Println("Destination file exists:", destination)
		}
		// if _, err := os.Stat(source); os.IsNotExist(err) {
		// 	t.Fatalf("Source file does not exist: %s", source)
		// } else {
		// 	fmt.Println("Source file exists:" + source)
		// }
		err := files.CopyFile(source, destination)
		assert.NoError(t, err, "Error while copying files")
		if _, err := os.Stat(destination);
		os.IsNotExist(err) {
			t.Fatalf("File not copied: %s", destination)
			fmt.Println("File not copied: " + destination)
		}
	    files.CopyFile("backend.tf", "../terraform/modules/s3/backend.tf")
	    // creating temp folder and copying tfvars file using CopyFile function
	    s3_landing_folder := test_structure.CopyTerraformFolderToTemp(t, "../terraform/modules/s3", "./")
	    files.CopyFile("s3_test.auto.tfvars", "../terraform/modules/s3/s3_test.auto.tfvars")
	    files.CopyFile("s3_test.auto.tfvars", s3_landing_folder+"/"+"s3_test.auto.tfvars")

	    terraformOptions := &terraform.Options{
		        // The path to where our Terraform code is located
		        // added temporary folder
		        TerraformDir: s3_landing_folder,

				// Environment variables to set when running Terraform
		        EnvVars: map[string]string{
			            "AWS_DEFAULT_REGION": "us-east-1",
		        },
				// temporary fix for the "logging empty output error" till we get permanent fix
				// https://github.com/hashicorp/terraform-provider-aws/issues/31139
		        RetryableTerraformErrors: map[string]string{
			            ".*empty output.*": "bug in aws_s3_bucket_logging, intermittent error",
		        },
		        MaxRetries:         5,
		        TimeBetweenRetries: 5 * time.Second,
	    }

	    // At the end of the test, run `terraform destroy`
	    defer terraform.Destroy(t, terraformOptions)
	    // Run `terraform init` and `terraform apply`
	    terraform.InitAndApply(t, terraformOptions)
	    expectedName := "sf-pcmngd04-use1-test-autolegacyilm-s3-landing"

	    outputName := "s3_landing_name"
	    s3BucketNames := terraform.Output(t, terraformOptions, outputName)
	    assert.Equal(t, s3BucketNames, expectedName)
}



Error:

FatalError{Underlying: error while running command: exit status 1; ╷
        	            	│ Error: Invalid provider configuration
        	            	│ 
        	            	│ Provider "registry.terraform.io/hashicorp/aws" requires explicit
        	            	│ configuration. Add a provider block to the root module and configure the
        	            	│ provider's required arguments as described in the provider documentation.
        	            	│ 
        	            	╵
        	            	╷
        	            	│ Error: No valid credential sources found
        	            	│ 
        	            	│   with provider["registry.terraform.io/hashicorp/aws"],
        	            	│   on <empty> line 0:
        	            	│   (source code not available)
        	            	│ 
        	            	│ Please see https://registry.terraform.io/providers/hashicorp/aws
        	            	│ for more information about providing credentials.
        	            	│ 
        	            	│ Error: failed to refresh cached credentials, no EC2 IMDS role found,
        	            	│ operation error ec2imds: GetMetadata, request canceled, context deadline
        	            	│ exceeded
        	            	│ 
        	            	╵}
