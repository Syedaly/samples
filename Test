download failed: s3://sf-pcmngd04-use1-test-autolegacyilm-s3-landing/scripts/data_validations.py to home/ssm-user/validations/scripts/data_validations.py An error occurred (AccessDenied) when calling the GetObject operation: User: arn:aws:sts::756033938671:assumed-role/sf-pcmngd04-use1-test-autolegacyilm-validation-role/i-095f97b7295dc1e43 is not authorized to perform: kms:Decrypt on resource: arn:aws:kms:us-east-1:756033938671:key/ee9ac746-8bf3-48c5-8d10-c68fdc55b441 because no resource-based policy allows the kms:Decrypt action

_________________________________
data "aws_iam_policy_document" "sf-ec2-assume-role-policy" {
  statement {
    actions = ["sts:AssumeRole"]
    principals {
      type        = "Service"
      identifiers = ["ec2.amazonaws.com"]
    }
  }
}

# Actions included in the policy
data "aws_iam_policy_document" "sf-als-ilm-validation-policy" {
  statement {
    sid    = "AllowAllActions"
    effect = "Allow"
    actions = [
      "s3:ListBucket",
      "s3:GetObject",
      "s3:PutObject",
      "s3:DeleteObject",
      "s3:GetBucketLocation",
      "s3:GetBucketAcl",
      "s3:GetObjectAcl",
      "s3:PutObjectAcl",	    
      "ec2:DescribeInstances",
      "ec2:StartInstances",
      "ec2:StopInstances",
	    "ec2:RunInstances",
      "kms:TagResource",
      "kms:List*",
      "kms:Get*",
      "kms:Describe*",      
      "kms:Create*",
      "kms:Encrypt",
      "kms:GenerateDataKey",
      "kms:Encrypt",
      "kms:Decrypt",     
    ]
    resources = [
      "arn:aws:s3:::sf-${var.deploy_env}-${var.default_tags.reg-abbr}-${var.default_tags.env}-${var.default_tags.tenant}-s3-landing",
      "arn:aws:s3:::sf-${var.deploy_env}-${var.default_tags.reg-abbr}-${var.default_tags.env}-${var.default_tags.tenant}-s3-raw",
      "arn:aws:s3:::sf-${var.deploy_env}-${var.default_tags.reg-abbr}-${var.default_tags.env}-${var.default_tags.tenant}-s3-landing/*",
      "arn:aws:s3:::sf-${var.deploy_env}-${var.default_tags.reg-abbr}-${var.default_tags.env}-${var.default_tags.tenant}-s3-raw/*",      
      "arn:aws:ec2:us-east-1:${var.login_info.account_id}:instance/*"
      ]
  }
  statement {
    effect    = "Allow"
    actions   = [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents"
    ]
    resources = ["arn:aws:logs:${var.default_tags.region}:${var.login_info.account_id}:*"]
  }
}

# Creates IAM role and updates the trust relationship
resource "aws_iam_role" "sf-als-ilm-validation-role" {
  name                  = "sf-${var.deploy_env}-${var.default_tags.reg-abbr}-${var.default_tags.env}-${var.default_tags.tenant}-validation-role"
  permissions_boundary  = var.login_info.role_pb_arn
  assume_role_policy    = data.aws_iam_policy_document.sf-ec2-assume-role-policy.json
  description           = "sf-${var.deploy_env}-${var.default_tags.reg-abbr}-${var.default_tags.env}-${var.default_tags.tenant}-validation-role"
  force_detach_policies = true

  tags = merge(
    var.default_tags,
    {
      "Name" = "sf-${var.deploy_env}-${var.default_tags.reg-abbr}-${var.default_tags.env}-${var.default_tags.tenant}-validation-role"
    }
  )
}

# Creates new inline policy
resource "aws_iam_role_policy" "sf-als-ilm-validation-policy" {
  name   = "sf-${var.deploy_env}-${var.default_tags.reg-abbr}-${var.default_tags.env}-${var.default_tags.tenant}-validation-policy"
  role   = aws_iam_role.sf-als-ilm-validation-role.name
  policy = data.aws_iam_policy_document.sf-als-ilm-validation-policy.json
}

# Creates new iam instance profile
resource "aws_iam_instance_profile" "sf-als-ilm-validation-profile" {
  name = "sf-${var.deploy_env}-${var.default_tags.reg-abbr}-${var.default_tags.env}-${var.default_tags.tenant}-validation-profile"
  role = aws_iam_role.sf-als-ilm-validation-role.name
  tags = merge(
    var.default_tags,
    {
      "Name" = "sf-${var.deploy_env}-${var.default_tags.reg-abbr}-${var.default_tags.env}-${var.default_tags.tenant}-validation-profile"
    }
  )
}

# Attach managed policies - kms
# resource "aws_iam_role_policy_attachment" "sf-role-policy-attach1" {
#   policy_arn = "arn:aws:iam::${var.account_number}:policy/sf-kms-access-policy"
#   role       = aws_iam_role.sf-als-ilm-validation-role.name
# }

# Attach managed policies - ssm
resource "aws_iam_role_policy_attachment" "sf-role-policy-attach2" {
  policy_arn = "arn:aws:iam::${var.login_info.account_id}:policy/sf-ssm-required-policy"
  role       = aws_iam_role.sf-als-ilm-validation-role.name
}

# Output ec2-role-name
output "sf-ec2-role-name" {
  value = aws_iam_instance_profile.sf-als-ilm-validation-profile.name
}

__________________________________________________________________________________________

resource "aws_kms_key" "ilm_validations_kms_key" {
  description             = "ILM Custom KMS Key for data validations"
  enable_key_rotation     = true
  deletion_window_in_days = 30
  tags                    = var.default_tags
  lifecycle {
    create_before_destroy = true
  }
  policy = data.aws_iam_policy_document.kms_key_validations_policy.json
}

 data "aws_iam_policy_document" "kms_key_validations_policy" {
   source_policy_documents = [
     data.aws_iam_policy_document.kms_key_common_policy.json,
     data.aws_iam_policy_document.kms_data_validations_policy.json
   ]
 }

resource "aws_kms_alias" "ilm_validations_kms_key_alias" {
  name          = "alias/sf-${var.deploy_env}-${var.default_tags.reg-abbr}-${var.default_tags.env}-${var.default_tags.tenant}-validations-kms-key"
  target_key_id = aws_kms_key.ilm_validations_kms_key.key_id
}

output "validations_kms_key_arn" {
  value = aws_kms_key.ilm_validations_kms_key.arn
}

output "validations_kms_key_id" {
  value = aws_kms_key.ilm_validations_kms_key.id
}
_____________________________________________

data "aws_iam_policy_document" "kms_data_validations_policy" {
  version = "2012-10-17"

  statement {
    sid    = "Allow access for EC2 Data Validations role"
    effect = "Allow"
    principals {
      type = "AWS"
      identifiers = [
        "arn:aws:iam::${var.login_info.account_id}:role/sf-${var.deploy_env}-${var.default_tags.reg-abbr}-${var.default_tags.env}-${var.default_tags.tenant}-validation-role"
      ]
    }
    actions = [
      "kms:Update*",
      "kms:UntagResource",
      "kms:TagResource",
      "kms:Revoke*",
      "kms:Put*",
      "kms:List*",
      "kms:Get*",
      "kms:Enable*",
      "kms:Disable*",
      "kms:Describe*",      
      "kms:Create*",
      "kms:Decrypt",
      "kms:Encrypt",
      "kms:GenerateDataKey"
    ]
    resources = ["*"]
  }

}
