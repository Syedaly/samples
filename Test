
################################################################################
# Predev Deployment Pipeline
################################################################################


trigger:
  branches:
    include:
      - feature/*

variables:
  - group: Terraform-Enterprise-Credentials 
  - name: tf_version
    value: '1.9.5'  
  - name: tf_directory
    value: './terraform'
  - name: TFE_WORKSPACE_NAME              
    value: ''     # <--- Set to your respective workspace.
  - name: target_deploy                   
    value: 'false'                        # <--- Set to true when targeted deploy is needed.
  - name: deploy_path           
    value: ''                             # <--- REQUIRED if target_deploy is set to true. Example: 'module.producer-env_core.module.c4c' IF not being used, KEEP EMPTY.


pool:
  name: 'dataengineering_tf' 


steps:
- checkout: self

 
# Debugging if needed
# - script: |
#     git config --list --show-origin | grep extraheader
#   displayName: "Debug: Show any leftover Git extraheaders"

# Step 0: Authorize Git 
- script: |
    git config --global http.https://psedevops.puget.com.extraheader "AUTHORIZATION: bearer $(System.AccessToken)"
  displayName: 'Authorize Git'  
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)


# Step 1: Check workspace
- script: |
    echo "Checking if workspace is allowed: $(TFE_WORKSPACE_NAME)"
    if [[ "$(TFE_WORKSPACE_NAME)" == *individual* || "${TFE_WORKSPACE_NAME}" == *predev* ]]; then
      echo "Valid workspace: proceeding."
    else
      echo "Invalid workspace: $(TFE_WORKSPACE_NAME). Aborting pipeline."
      exit 1
    fi
  displayName: 'Validate TFE Workspace Access'


# Step 2: Install Terraform manually
- script: |
    wget https://releases.hashicorp.com/terraform/$(tf_version)/terraform_$(tf_version)_linux_amd64.zip
    unzip terraform_*.zip
    sudo mv terraform /usr/local/bin/
    terraform version
  displayName: 'Install Terraform'
 

# Step 3: Generate terraform.tf dynamically 
- script: | 
    echo 'terraform {
      cloud {
        hostname     = "tf.puget.com"
        organization = "DataEngineering"
        workspaces {
          name = "$(TFE_WORKSPACE_NAME)"
        }
      }
      required_providers {
        aws = {
          source  = "hashicorp/aws"
          version = "~> 5.82.0"
        }
      }
      required_version = "1.9.5"
    }' > terraform.tf
    echo "Generated terraform.tf with workspace: $(TFE_WORKSPACE_NAME)"
  displayName: 'Generate terraform.tf'


# Step 4: Initialize with TFE backend
- script: |
    echo "=== Terraform Init ==="
    terraform init -input=false 
  displayName: 'Terraform Init'
  env:
    TF_TOKEN_tf_puget_com: $(TF_TEAM_TOKEN)
    AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)


# Step 5: Terraform Apply (targeted OR full apply)
- ${{ if and(eq(variables['target_deploy'], 'true'), ne(variables['deploy_path'], '')) }}:
  - script: |
      echo "Running targeted Terraform Apply for: $(deploy_path)"
      terraform apply -input=false -auto-approve -target=$(deploy_path)
    displayName: 'Terraform Apply (Targeted)'
    condition: and(succeeded(), or(contains(variables['TFE_WORKSPACE_NAME'], 'individual'), contains(variables['TFE_WORKSPACE_NAME'], 'predev')))
    env:
      TF_TOKEN_tf_puget_com: $(TF_TEAM_TOKEN)
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

- ${{ if ne(variables['target_deploy'], 'true') }}:
  - script: |
      echo "Running full Terraform Plan and Apply for individual workspace"
      export TF_LOG=DEBUG
      terraform apply -target='module.ProducerEnvCore' -input=false -auto-approve
    displayName: 'Terraform Plan and Apply (Full - Individual or Predev env only)'
    condition: and(succeeded(), or(contains(variables['TFE_WORKSPACE_NAME'], 'individual'), contains(variables['TFE_WORKSPACE_NAME'], 'predev')))
    env:
      TF_TOKEN_tf_puget_com: $(TF_TEAM_TOKEN) 
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)


# Step 6: Clean up
- script: |
    git config --global --unset-all http."https://psedevops.puget.com".extraheader
  displayName: "Clean all Git extraheaders"
  condition: always()


