 actions = [
      "s3:GetObjectVersionTagging",
      "s3:GetObjectAcl",
      "s3:GetBucketObjectLockConfiguration",
      "ec2:StartInstances",
      "ec2:DescribeInstances",
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      "s3:GetObjectVersionAcl",
      "s3:ListObjects",
      "s3:PutObject",
      "s3:PutObjectTagging",
      "s3:HeadBucket",
      "s3:DeleteObject",
      "s3:DeleteObjectTagging",
      "s3:GetBucketPolicyStatus",
      "s3:GetObjectRetention",
      "s3:GetBucketWebsite",
      "s3:ListJobs",
      "ec2:RunInstances",
      "s3:DeleteObjectVersionTagging",
      "s3:GetObjectLegalHold",
      "s3:GetBucketNotification",
      "ec2:StopInstances",
      "s3:GetReplicationConfiguration",
      "glue:CreateCrawler",
      "glue:TagResource",
      "s3:ListMultipartUploadParts",
      "s3:PutObject",
      "s3:GetObject",
      "s3:DescribeJob",
      "s3:GetAnalyticsConfiguration",
      "s3:GetObjectVersionForReplication",
      "s3:CreateJob",
      "s3:GetLifecycleConfiguration",
      "s3:GetAccessPoint",
      "s3:GetInventoryConfiguration",
      "s3:GetBucketTagging",
      "s3:GetBucketLogging",
      "s3:ListBucketVersions",
      "s3:ReplicateTags",
      "s3:ListBucket",
      "s3:GetAccelerateConfiguration",
      "s3:GetBucketPolicy",
      "s3:GetEncryptionConfiguration",
      "s3:GetObjectVersionTorrent",
      "sns:Publish",
      "sns:*",
      "s3:PutBucketTagging",
      "s3:GetBucketRequestPayment",
      "s3:GetAccessPointPolicyStatus",
      "s3:GetObjectTagging",
      "s3:GetMetricsConfiguration",
      "s3:PutObjectAcl",
      "s3:GetBucketPublicAccessBlock",
      "s3:ListBucketMultipartUploads",
      "ec2:TerminateInstances",
      "s3:ListAccessPoints",
      "s3:PutObjectVersionTagging",
      "s3:GetBucketVersioning",
      "s3:GetBucketAcl",
      "s3:GetObjectTorrent",
      "s3:GetAccountPublicAccessBlock",
      "s3:ListAllMyBuckets",
      "s3:GetBucketCORS",
      "s3:GetBucketLocation",
      "s3:GetAccessPointPolicy",
      "s3:GetObjectVersion",
      "kms:Update*",
      "kms:UntagResource",
      "kms:TagResource",
      "kms:ScheduleKeyDeletion",
      "kms:Revoke*",
      "kms:Put*",
      "kms:List*",
      "kms:Get*",
      "kms:GenerateDataKey",
      "kms:Encrypt",
      "kms:Enable*",
      "kms:Disable*",
      "kms:Describe*",
      "kms:Delete*",
      "kms:Decrypt",
      "kms:Create*",
      "kms:CancelKeyDeletion"
    ]


Error: creating S3 Bucket (sf-pcmngd04-use2-test-autolegacyilm-s3-landing) Notification: operation error S3: PutBucketNotificationConfiguration, https response error StatusCode: 400, RequestID: 188EVVEAXWBY6FR4, HostID: G83H8unzLlVdhRsyE0SxgWnkgZaqv/ajTq4YQjtevX+TLfJpWIBP5cA6HnfDsOoMaGBR+wpsubI=, api error InvalidArgument: Unable to validate the following destination configurations
TestS3BucketExists 2025-02-11T21:15:00Z logger.go:67: │ 
TestS3BucketExists 2025-02-11T21:15:00Z logger.go:67: │   with aws_s3_bucket_notification.bucket_notification,
TestS3BucketExists 2025-02-11T21:15:00Z logger.go:67: │   on landing-bucket.tf line 59, in resource "aws_s3_bucket_notification" "bucket_notification":
TestS3BucketExists 2025-02-11T21:15:00Z logger.go:67: │   59: resource "aws_s3_bucket_notification" "bucket_notification" {
TestS3BucketExists 2025-02-11T21:15:00Z logger.go:67: │ 
TestS3BucketExists 2025-02-11T21:15:00Z logger.go:67: ╵
TestS3BucketExists 2025-02-11T21:15:00Z logger.go:67: 
TestS3BucketExists 2025-02-11T21:15:00Z logger.go:67: Error: Failed to perform terraform apply. Unexpected exit code: 1
TestS3BucketExists 2025-02-11T21:15:00Z retry.go:99: Returning due to fatal error: FatalError{Underlying: error while running command: exit status 1; }
    apply.go:15: 
        	Error Trace:	/go/pkg/mod/github.com/gruntwork-io/terratest@v0.48.2/modules/terraform/apply.go:15
        	            				/builds/autolegacyilm/autolegacy-ilm-tf/terratest_s3/s3_test.go:56
        	Error:      	Received unexpected error:
        	            	FatalError{Underlying: error while running command: exit status 1; }
        	Test:       	TestS3BucketExists


resource "aws_s3_bucket_notification" "bucket_notification" {
  bucket = module.sf_s3_landing.id

  queue {
    queue_arn     = var.queue_arn
    events        = ["s3:ObjectCreated:*"]
    filter_suffix = ".trigger"
  }
}

module "s3" {
  source          = "./modules/s3"
  default_tags    = module.tags.common_tags
  deploy_env      = var.deploy_env
  landing_kms_arn = module.kms_key.s3_landing_kms_key_arn
  raw_kms_arn     = module.kms_key.s3_raw_kms_key_arn
  transfer_arn    = var.transfer_principal_arn
  conversion_arn  = var.conversion_principal_arn
  queue_arn       = module.sqs.queue_arn
}

module "sqs" {
  source              = "./modules/sqs"
  default_tags        = module.tags.common_tags
  deploy_env          = var.deploy_env
  login_info          = module.login_info
  sqs_kms_key_arn     = module.kms_key.sqs_kms_key_arn
  lambda_function_arn = var.lambda_function_arn
  lambda_role_arn     = var.lambda_role_arn
  s3_landing_arn      = module.s3.s3_landing_arn
}
