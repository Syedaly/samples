import boto3
import re
from datetime import datetime

s3 = boto3.client('s3')
ilm_year = 25

def tag_s3_object(bucket_name, key, term_year):
    try:
        s3.put_object_tagging(
            Bucket=bucket_name,
            Key=key,
            Tagging={
                'TagSet': [
                    {
                        'Key': 'TERM_YEAR',
                        'Value': str(term_year)
                    }
                ]
            }
        )
        message = f"Successfully tagged the S3 object {key} with termination year {term_year}."
        print(message)
        return {"status": message}
    except Exception as e:  # Catch all exceptions
        print(f"An unexpected error occurred to tag S3 object {key}: {str(e)}")
        raise  # Re-raise the exception to handle it in the handler

def update_s3_lifecycle(bucket_name, key, term_year):
    # Retrieve the current lifecycle configuration
    try:
        current_config = s3.get_bucket_lifecycle_configuration(Bucket=bucket_name)
        current_rules = current_config['Rules']
    except s3.exceptions.NoSuchLifecycleConfiguration:
        current_rules = []
    except Exception as e:
        error_message = f"An error occurred while retrieving the lifecycle configuration: {str(e)}"
        print (error_message)
        raise

    delete_year = ilm_year + term_year

    # Check if delete-year rule already exists
    rule_id = f'delete-year-{delete_year}'
    existing_ids = [rule['ID'] for rule in current_rules]

    if rule_id not in existing_ids:
        # Calculate the expiration date
        current_date = datetime.now()
        current_year = current_date.year

        if delete_year > current_year:
            expiration_date = f'{delete_year}-12-31'
        else:
            expiration_date = f'{current_year}-12-31'

        new_rule = {
            'ID': rule_id,
            'Status': 'Enabled',
            'Filter': {
                'Tag': {
                    'Key': 'TERM_YEAR',
                    'Value': str(term_year)
                }
            },
            'Expiration': {
                'Date': expiration_date
            }
        }

        # Add the new rule to the existing rules
        current_rules.append(new_rule)

        # Update the bucket's lifecycle configuration with the combined rules
        try:
            s3.put_bucket_lifecycle_configuration(
                Bucket=bucket_name,
                LifecycleConfiguration={'Rules': current_rules}
            )
            message = f"Lifecycle rule expiration {rule_id} added to bucket {bucket_name}."
            print(message)
            return {"status": message}
        except Exception as e:
            error_message = f"An unexpected error occurred updating lifecycle for object {key} in bucket {bucket_name}: {str(e)}"
            print(error_message)
            raise
    else:
        message = f"Lifecycle rule expiration {rule_id} already exists in bucket {bucket_name}."
        print(message)
        return {"status": message}

def s3_lambda_handler(event, context):
    try:
        bucket_name = event['Records'][0]['s3']['bucket']['name']
        key = event['Records'][0]['s3']['object']['key']

        # Convert '%3D' to '=' in the key
        key = key.replace('%3D', '=')

        match = re.search(r'TERM_YEAR=(\d+)', key)
        if match:
            term_year = int(match.group(1))

            # Tag the object with TERM_YEAR
            tag_s3_object(bucket_name, key, term_year)

            # Update the bucket's lifecycle configuration
            update_s3_lifecycle(bucket_name, key, term_year)
        else:
            message = f"No TERM_YEAR found in object {key} of bucket {bucket_name}."
            print(message)
            return {"status": message} 
    except Exception as e:
        error_message = f"An unexpected error occurred for object {key} in bucket {bucket_name}: {str(e)}"
        print(error_message)
        return {"status": "Error", "error_message": error_message}
